{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/client.js","lib/options.js","lib/helpers.js"],"names":["options","require","helpers","registrationReady","registration","active","debug","Promise","resolve","serviceWorker","installing","waiting","reject","state","listener","event","Error","removeEventListener","addEventListener","module","exports","cache","addToCache","uncache","removeFromCache","scope","self","URL","location","href","cacheName","preCacheItems","successResponses","message","flag","globalOptions","console","log","openCache","caches","open","fetchAndCache","request","fetch","clone","then","response","test","status","put","renameCache","source","destination","all","results","sourceCache","destCache","keys","requests","map","match","url","add"],"mappings":"AAAA;ACeA,YAYA,IAAIA,SAAUC,QAAQ,aAClBC,QAAUD,QAAQ,aAYlBE,kBAAoB,SAASC,EAAcJ,GAC7C,GAAII,EAAaC,OAEf,MADAH,SAAQI,MAAM,gCAAiCN,GACxCO,QAAQC,SAGjB,IAAIC,GAAgBL,EAAaM,YAAcN,EAAaO,OAE5D,OAAO,IAAIJ,SAAQ,SAASC,EAASI,GAGP,cAAxBH,EAAcI,QAChBX,QAAQI,MAAM,2BAA4BN,GAC1CQ,IAEF,IAAIM,GAAW,SAASC,GAEtB,GADAb,QAAQI,MAAM,uBAAyBG,EAAcI,MAAYb,GACrC,cAAxBS,EAAcI,MAChBL,QACK,CAAA,GAA4B,cAAxBC,EAAcI,MAGvB,MAFAD,GAAO,GAAII,OAAM,4BAInBP,EAAcQ,oBAAoB,cAAeH,GAEnDL,GAAcS,iBAAiB,cAAeJ,KAIlDK,QAAOC,SACLjB,kBAAmBA,kBACnBH,QAASA,QACTqB,MAAOnB,QAAQoB,WACfC,QAASrB,QAAQsB;;AE3DnB,YAIA,SAASlB,OAAM2B,EAASjC,GACtBA,EAAUA,KACV,IAAIkC,GAAOlC,EAAQM,OAAS6B,cAAc7B,KACtC4B,IACFE,QAAQC,IAAI,gBAAkBJ,GAIlC,QAASK,WAAUtC,GACjBA,EAAUA,KACV,IAAI8B,GAAY9B,EAAQ8B,WAAaK,cAAcL,SAEnD,OADAxB,OAAM,kBAAoBwB,EAAY,IAAK9B,GACpCuC,OAAOC,KAAKV,GAGrB,QAASW,eAAcC,EAAS1C,GAC9BA,EAAUA,KACV,IAAIgC,GAAmBhC,EAAQgC,kBAAoBG,cAAcH,gBACjE,OAAOW,OAAMD,EAAQE,SAASC,KAAK,SAASC,GAS1C,MANId,GAAiBe,KAAKD,EAASE,SACjCV,UAAUtC,GAAS6C,KAAK,SAASxB,GAC/BA,EAAM4B,IAAIP,EAASI,KAIhBA,EAASF,UAIpB,QAASM,aAAYC,EAAQC,EAAapD,GAExC,MADAM,OAAM,oBAAsB6C,EAAS,SAAWC,EAAc,IAAKpD,GAC5DuC,OAAAA,UAAca,GAAaP,KAAK,WACrC,MAAOtC,SAAQ8C,KACbd,OAAOC,KAAKW,GACZZ,OAAOC,KAAKY,KACXP,KAAK,SAASS,GACf,GAAIC,GAAcD,EAAQ,GACtBE,EAAYF,EAAQ,EAExB,OAAOC,GAAYE,OAAOZ,KAAK,SAASa,GACtC,MAAOnD,SAAQ8C,IAAIK,EAASC,IAAI,SAASjB,GACvC,MAAOa,GAAYK,MAAMlB,GAASG,KAAK,SAASC,GAC9C,MAAOU,GAAUP,IAAIP,EAASI,UAGjCD,KAAK,WACN,MAAON,QAAAA,UAAcY,SAM7B,QAAS7B,YAAWuC,EAAK7D,GACvB,MAAOsC,WAAUtC,GAAS6C,KAAK,SAASxB,GACtC,MAAOA,GAAMyC,IAAID,KAIrB,QAASrC,iBAAgBqC,EAAK7D,GAC5B,MAAOsC,WAAUtC,GAAS6C,KAAK,SAASxB,GACtC,MAAOA,GAAAA,UAAawC,KAhExB,GAAI1B,eAAgBlC,QAAQ,YAoE5BkB,QAAOC,SACLd,MAAOA,MACPmC,cAAeA,cACfH,UAAWA,UACXY,YAAaA,YACb5B,WAAYA,WACZE,gBAAiBA;;AD5EnB,YAIA,IAAIC,MAEFA,OADEC,KAAKtB,aACCsB,KAAKtB,aAAaqB,MAElBC,KAAKD,OAAS,GAAIE,KAAI,KAAMD,KAAKE,UAAUC,KAGrDV,OAAOC,SACLU,UAAW,sBAAwBL,MAAQ,MAC3CnB,OAAO,EACPyB,iBAIAC,iBAAkB","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n  Copyright 2014 Google Inc. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n'use strict';\n\n/*\n * TODOs:\n * - options.scope? Single client can have multiple workers\n * - stale-while-revalidate: a way to ping back to the page as new versions\n *   come in?\n * - Possible idea for client config: Have one global method that gets you a\n *   toolbox object for a registration, and one for getting a registration. Then\n *   all other methods know which scope they are for.\n */\n\nvar options = require('./options');\nvar helpers = require('./helpers');\n\n/**\n * Returns a promise that will resolve when the given registration becomes\n * active. `navigator.serviceWorker.ready` only works for the controlling\n * worker, while this method can be used with service workers that have other\n * scopes.\n *\n * @param registration {ServiceWorkerRegistration}\n * @param options {Object}\n * @return {Promise<undefined>}\n */\nvar registrationReady = function(registration, options) {\n  if (registration.active) {\n    helpers.debug('Service worker already active', options);\n    return Promise.resolve();\n  }\n\n  var serviceWorker = registration.installing || registration.waiting;\n\n  return new Promise(function(resolve, reject) {\n    // Because the Promise function is called on next tick there is a\n    // small chance that the worker became active already.\n    if (serviceWorker.state === 'activated') {\n      helpers.debug('Service worker activated', options);\n      resolve();\n    }\n    var listener = function(event) {\n      helpers.debug('Worker state is now ' + serviceWorker.state + '', options);\n      if (serviceWorker.state === 'activated') {\n        resolve();\n      } else if (serviceWorker.state === 'redundant') {\n        reject(new Error('Worker became redundant'));\n      } else {\n        return;\n      }\n      serviceWorker.removeEventListener('statechange', listener);\n    };\n    serviceWorker.addEventListener('statechange', listener);\n  });\n};\n\nmodule.exports = {\n  registrationReady: registrationReady,\n  options: options,\n  cache: helpers.addToCache,\n  uncache: helpers.removeFromCache,\n};\n","/*\n  Copyright 2014 Google Inc. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n'use strict';\n\n// TODO: This is necessary to handle different implementations in the wild\n// The spec defines self.registration, but it was not implemented in Chrome 40.\nvar scope;\nif (self.registration) {\n  scope = self.registration.scope;\n} else {\n  scope = self.scope || new URL('./', self.location).href;\n}\n\nmodule.exports = {\n  cacheName: '$$$toolbox-cache$$$' + scope + '$$$',\n  debug: false,\n  preCacheItems: [],\n  // A regular expression to apply to HTTP response codes. Codes that match\n  // will be considered successes, while others will not, and will not be\n  // cached.\n  successResponses: /^0|([123]\\d\\d)|(40[14567])|410$/,\n};\n","/*\n  Copyright 2014 Google Inc. All Rights Reserved.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n'use strict';\n\nvar globalOptions = require('./options');\n\nfunction debug(message, options) {\n  options = options || {};\n  var flag = options.debug || globalOptions.debug;\n  if (flag) {\n    console.log('[sw-toolbox] ' + message);\n  }\n}\n\nfunction openCache(options) {\n  options = options || {};\n  var cacheName = options.cacheName || globalOptions.cacheName;\n  debug('Opening cache \"' + cacheName + '\"', options);\n  return caches.open(cacheName);\n}\n\nfunction fetchAndCache(request, options) {\n  options = options || {};\n  var successResponses = options.successResponses || globalOptions.successResponses;\n  return fetch(request.clone()).then(function(response) {\n\n    // Only cache successful responses\n    if (successResponses.test(response.status)) {\n      openCache(options).then(function(cache) {\n        cache.put(request, response);\n      });\n    }\n\n    return response.clone();\n  });\n}\n\nfunction renameCache(source, destination, options) {\n  debug('Renaming cache: [' + source + '] to [' + destination + ']', options);\n  return caches.delete(destination).then(function() {\n    return Promise.all([\n      caches.open(source),\n      caches.open(destination)\n    ]).then(function(results) {\n      var sourceCache = results[0];\n      var destCache = results[1];\n\n      return sourceCache.keys().then(function(requests) {\n        return Promise.all(requests.map(function(request) {\n          return sourceCache.match(request).then(function(response) {\n            return destCache.put(request, response);\n          });\n        }));\n      }).then(function() {\n        return caches.delete(source);\n      });\n    });\n  });\n}\n\nfunction addToCache(url, options) {\n  return openCache(options).then(function(cache) {\n    return cache.add(url);\n  });\n}\n\nfunction removeFromCache(url, options) {\n  return openCache(options).then(function(cache) {\n    return cache.delete(url);\n  });\n}\n\nmodule.exports = {\n  debug: debug,\n  fetchAndCache: fetchAndCache,\n  openCache: openCache,\n  renameCache: renameCache,\n  addToCache: addToCache,\n  removeFromCache: removeFromCache,\n};\n"]}